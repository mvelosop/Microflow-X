//------------------------------------------------------------------------------
//  TenantRepository.cs
//
//  Implementation of: TenantRepository (Class) <<entity-repository>>
//  Generated by Domion-MDA - http://www.coderepo.blog/domion
//
//  Created on     : 02-jun-2017 10:49:07
//  Original author: Miguel
//------------------------------------------------------------------------------

using Domion.Data.Base;
using Microsoft.EntityFrameworkCore;
using System;
using System.Linq;
using System.Threading.Tasks;
using Tenants.Core.Model;
using Tenants.Core.Repositories;
using Tenants.Data.Configuration;

namespace Tenants.Data.Repositories
{
    public class TenantRepository : EntityRepository<Tenant>, ITenantRepository
    {
        /// <inheritdoc />
        public TenantRepository(TenantsDbContext dbContext)
            : base(dbContext)
        {
        }

        public new virtual void Delete(Tenant entity)
        {
            base.Delete(entity);
        }

        public Task<Tenant> FindByEmailAsync(string email)
        {
            return FindByEmailAsync(email, Guid.Empty);
        }

        public Task<Tenant> FindByEmailAsync(string email, Guid ignoreId)
        {
            var query = QueryInternal(t => t.Email == email);

            if (ignoreId != Guid.Empty)
            {
                query = query.Where(t => t.Id != ignoreId);
            }

            return query.SingleOrDefaultAsync();
        }

        public Task<Tenant> FindByIdAsync(Guid id)
        {
            return QueryInternal(t => t.Id == id).SingleOrDefaultAsync();
        }

        public new virtual void Insert(Tenant entity)
        {
            CommonSaveOperations(entity);

            base.Insert(entity);
        }

        public new virtual Task<int> SaveChangesAsync()
        {
            return base.SaveChangesAsync();
        }

        public new virtual void Update(Tenant entity)
        {
            CommonSaveOperations(entity);

            base.Update(entity);
        }

        public virtual void Upsert(Tenant entity)
        {
            if (entity.Id == Guid.Empty)
            {
                Insert(entity);
            }
            else
            {
                Update(entity);
            }
        }

        /// <summary>
        ///     Performs operations that have to be executed both on inserts and updates.
        /// </summary>
        internal virtual void CommonSaveOperations(Tenant entity)
        {
            TrimStrings(entity);
        }

        private void TrimStrings(Tenant entity)
        {
            entity.Name = entity.Name?.Trim();
        }
    }
}